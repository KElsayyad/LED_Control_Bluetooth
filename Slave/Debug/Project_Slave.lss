
Project_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000838  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000bd0  00000000  00000000  0000088c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000004a6  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 11 04 	call	0x822	; 0x822 <main>
  64:	0c 94 1a 04 	jmp	0x834	; 0x834 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Actuator_Init>:
 */
#include "DIO_Int.h"
#include "SPI_Int.h"
#include "Actuator_Int.h"
void Actuator_Init(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinDirection(GroupB, 0, OUTPUT);
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	60 e0       	ldi	r22, 0x00	; 0
  78:	41 e0       	ldi	r20, 0x01	; 1
  7a:	0e 94 71 00 	call	0xe2	; 0xe2 <Dio_SetPinDirection>
	SPI_InitSlave();
  7e:	0e 94 44 03 	call	0x688	; 0x688 <SPI_InitSlave>
}
  82:	cf 91       	pop	r28
  84:	df 91       	pop	r29
  86:	08 95       	ret

00000088 <Actuator_Control>:
void Actuator_Control(void)
{
  88:	df 93       	push	r29
  8a:	cf 93       	push	r28
  8c:	0f 92       	push	r0
  8e:	cd b7       	in	r28, 0x3d	; 61
  90:	de b7       	in	r29, 0x3e	; 62
	u8 val;
	val=SPI_ReceiveByte();
  92:	0e 94 80 03 	call	0x700	; 0x700 <SPI_ReceiveByte>
  96:	89 83       	std	Y+1, r24	; 0x01
	if (val == ON)
  98:	89 81       	ldd	r24, Y+1	; 0x01
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	41 f4       	brne	.+16     	; 0xae <Actuator_Control+0x26>
		SET_BIT(PORTB,0);
  9e:	a8 e3       	ldi	r26, 0x38	; 56
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e8 e3       	ldi	r30, 0x38	; 56
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	8c 93       	st	X, r24
  ac:	16 c0       	rjmp	.+44     	; 0xda <Actuator_Control+0x52>
	else if (val == OFF)
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	41 f4       	brne	.+16     	; 0xc4 <Actuator_Control+0x3c>
		CLR_BIT(PORTB,0);
  b4:	a8 e3       	ldi	r26, 0x38	; 56
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e8 e3       	ldi	r30, 0x38	; 56
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8e 7f       	andi	r24, 0xFE	; 254
  c0:	8c 93       	st	X, r24
  c2:	0b c0       	rjmp	.+22     	; 0xda <Actuator_Control+0x52>
	else if (val == TOG)
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	83 30       	cpi	r24, 0x03	; 3
  c8:	41 f4       	brne	.+16     	; 0xda <Actuator_Control+0x52>
		TOG_BIT(PORTB,0);
  ca:	a8 e3       	ldi	r26, 0x38	; 56
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e8 e3       	ldi	r30, 0x38	; 56
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	89 27       	eor	r24, r25
  d8:	8c 93       	st	X, r24
}
  da:	0f 90       	pop	r0
  dc:	cf 91       	pop	r28
  de:	df 91       	pop	r29
  e0:	08 95       	ret

000000e2 <Dio_SetPinDirection>:
 */

#include "DIO_Int.h"

void Dio_SetPinDirection(u8 GroupNo, u8 PinNo, u8 Direction)
{
  e2:	df 93       	push	r29
  e4:	cf 93       	push	r28
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	27 97       	sbiw	r28, 0x07	; 7
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	6a 83       	std	Y+2, r22	; 0x02
  fa:	4b 83       	std	Y+3, r20	; 0x03
	if((GroupNo<=GroupD) && (PinNo<=PIN7))
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	84 30       	cpi	r24, 0x04	; 4
 100:	08 f0       	brcs	.+2      	; 0x104 <Dio_SetPinDirection+0x22>
 102:	ee c0       	rjmp	.+476    	; 0x2e0 <Dio_SetPinDirection+0x1fe>
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	88 30       	cpi	r24, 0x08	; 8
 108:	08 f0       	brcs	.+2      	; 0x10c <Dio_SetPinDirection+0x2a>
 10a:	ea c0       	rjmp	.+468    	; 0x2e0 <Dio_SetPinDirection+0x1fe>
	{
		if(Direction==OUTPUT)
 10c:	8b 81       	ldd	r24, Y+3	; 0x03
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	09 f0       	breq	.+2      	; 0x114 <Dio_SetPinDirection+0x32>
 112:	6f c0       	rjmp	.+222    	; 0x1f2 <Dio_SetPinDirection+0x110>
		{
			switch(GroupNo)
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	28 2f       	mov	r18, r24
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	3f 83       	std	Y+7, r19	; 0x07
 11c:	2e 83       	std	Y+6, r18	; 0x06
 11e:	8e 81       	ldd	r24, Y+6	; 0x06
 120:	9f 81       	ldd	r25, Y+7	; 0x07
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	91 05       	cpc	r25, r1
 126:	49 f1       	breq	.+82     	; 0x17a <Dio_SetPinDirection+0x98>
 128:	2e 81       	ldd	r18, Y+6	; 0x06
 12a:	3f 81       	ldd	r19, Y+7	; 0x07
 12c:	22 30       	cpi	r18, 0x02	; 2
 12e:	31 05       	cpc	r19, r1
 130:	2c f4       	brge	.+10     	; 0x13c <Dio_SetPinDirection+0x5a>
 132:	8e 81       	ldd	r24, Y+6	; 0x06
 134:	9f 81       	ldd	r25, Y+7	; 0x07
 136:	00 97       	sbiw	r24, 0x00	; 0
 138:	61 f0       	breq	.+24     	; 0x152 <Dio_SetPinDirection+0x70>
 13a:	d2 c0       	rjmp	.+420    	; 0x2e0 <Dio_SetPinDirection+0x1fe>
 13c:	2e 81       	ldd	r18, Y+6	; 0x06
 13e:	3f 81       	ldd	r19, Y+7	; 0x07
 140:	22 30       	cpi	r18, 0x02	; 2
 142:	31 05       	cpc	r19, r1
 144:	71 f1       	breq	.+92     	; 0x1a2 <Dio_SetPinDirection+0xc0>
 146:	8e 81       	ldd	r24, Y+6	; 0x06
 148:	9f 81       	ldd	r25, Y+7	; 0x07
 14a:	83 30       	cpi	r24, 0x03	; 3
 14c:	91 05       	cpc	r25, r1
 14e:	e9 f1       	breq	.+122    	; 0x1ca <Dio_SetPinDirection+0xe8>
 150:	c7 c0       	rjmp	.+398    	; 0x2e0 <Dio_SetPinDirection+0x1fe>
			{
			case GroupA: SET_BIT(DDRA, PinNo); break;
 152:	aa e3       	ldi	r26, 0x3A	; 58
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	ea e3       	ldi	r30, 0x3A	; 58
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	48 2f       	mov	r20, r24
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	28 2f       	mov	r18, r24
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 2e       	mov	r0, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <Dio_SetPinDirection+0x8e>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <Dio_SetPinDirection+0x8a>
 174:	84 2b       	or	r24, r20
 176:	8c 93       	st	X, r24
 178:	b3 c0       	rjmp	.+358    	; 0x2e0 <Dio_SetPinDirection+0x1fe>
			case GroupB: SET_BIT(DDRB, PinNo); break;
 17a:	a7 e3       	ldi	r26, 0x37	; 55
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	e7 e3       	ldi	r30, 0x37	; 55
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	48 2f       	mov	r20, r24
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	28 2f       	mov	r18, r24
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 2e       	mov	r0, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <Dio_SetPinDirection+0xb6>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <Dio_SetPinDirection+0xb2>
 19c:	84 2b       	or	r24, r20
 19e:	8c 93       	st	X, r24
 1a0:	9f c0       	rjmp	.+318    	; 0x2e0 <Dio_SetPinDirection+0x1fe>
			case GroupC: SET_BIT(DDRC, PinNo); break;
 1a2:	a4 e3       	ldi	r26, 0x34	; 52
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	e4 e3       	ldi	r30, 0x34	; 52
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	48 2f       	mov	r20, r24
 1ae:	8a 81       	ldd	r24, Y+2	; 0x02
 1b0:	28 2f       	mov	r18, r24
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 2e       	mov	r0, r18
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <Dio_SetPinDirection+0xde>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	0a 94       	dec	r0
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <Dio_SetPinDirection+0xda>
 1c4:	84 2b       	or	r24, r20
 1c6:	8c 93       	st	X, r24
 1c8:	8b c0       	rjmp	.+278    	; 0x2e0 <Dio_SetPinDirection+0x1fe>
			case GroupD: SET_BIT(DDRD, PinNo); break;
 1ca:	a1 e3       	ldi	r26, 0x31	; 49
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	e1 e3       	ldi	r30, 0x31	; 49
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	48 2f       	mov	r20, r24
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	28 2f       	mov	r18, r24
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 2e       	mov	r0, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <Dio_SetPinDirection+0x106>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <Dio_SetPinDirection+0x102>
 1ec:	84 2b       	or	r24, r20
 1ee:	8c 93       	st	X, r24
 1f0:	77 c0       	rjmp	.+238    	; 0x2e0 <Dio_SetPinDirection+0x1fe>
			}
		}
		else if(Direction==INPUT)
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	88 23       	and	r24, r24
 1f6:	09 f0       	breq	.+2      	; 0x1fa <Dio_SetPinDirection+0x118>
 1f8:	73 c0       	rjmp	.+230    	; 0x2e0 <Dio_SetPinDirection+0x1fe>
		{
			switch(GroupNo)
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	3d 83       	std	Y+5, r19	; 0x05
 202:	2c 83       	std	Y+4, r18	; 0x04
 204:	8c 81       	ldd	r24, Y+4	; 0x04
 206:	9d 81       	ldd	r25, Y+5	; 0x05
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	91 05       	cpc	r25, r1
 20c:	59 f1       	breq	.+86     	; 0x264 <Dio_SetPinDirection+0x182>
 20e:	2c 81       	ldd	r18, Y+4	; 0x04
 210:	3d 81       	ldd	r19, Y+5	; 0x05
 212:	22 30       	cpi	r18, 0x02	; 2
 214:	31 05       	cpc	r19, r1
 216:	2c f4       	brge	.+10     	; 0x222 <Dio_SetPinDirection+0x140>
 218:	8c 81       	ldd	r24, Y+4	; 0x04
 21a:	9d 81       	ldd	r25, Y+5	; 0x05
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	69 f0       	breq	.+26     	; 0x23a <Dio_SetPinDirection+0x158>
 220:	5f c0       	rjmp	.+190    	; 0x2e0 <Dio_SetPinDirection+0x1fe>
 222:	2c 81       	ldd	r18, Y+4	; 0x04
 224:	3d 81       	ldd	r19, Y+5	; 0x05
 226:	22 30       	cpi	r18, 0x02	; 2
 228:	31 05       	cpc	r19, r1
 22a:	89 f1       	breq	.+98     	; 0x28e <Dio_SetPinDirection+0x1ac>
 22c:	8c 81       	ldd	r24, Y+4	; 0x04
 22e:	9d 81       	ldd	r25, Y+5	; 0x05
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	91 05       	cpc	r25, r1
 234:	09 f4       	brne	.+2      	; 0x238 <Dio_SetPinDirection+0x156>
 236:	40 c0       	rjmp	.+128    	; 0x2b8 <Dio_SetPinDirection+0x1d6>
 238:	53 c0       	rjmp	.+166    	; 0x2e0 <Dio_SetPinDirection+0x1fe>
			{
			case GroupA: CLR_BIT(DDRA, PinNo); break;
 23a:	aa e3       	ldi	r26, 0x3A	; 58
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	ea e3       	ldi	r30, 0x3A	; 58
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	48 2f       	mov	r20, r24
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <Dio_SetPinDirection+0x176>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <Dio_SetPinDirection+0x172>
 25c:	80 95       	com	r24
 25e:	84 23       	and	r24, r20
 260:	8c 93       	st	X, r24
 262:	3e c0       	rjmp	.+124    	; 0x2e0 <Dio_SetPinDirection+0x1fe>
			case GroupB: CLR_BIT(DDRB, PinNo); break;
 264:	a7 e3       	ldi	r26, 0x37	; 55
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	e7 e3       	ldi	r30, 0x37	; 55
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	48 2f       	mov	r20, r24
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	28 2f       	mov	r18, r24
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 2e       	mov	r0, r18
 27c:	02 c0       	rjmp	.+4      	; 0x282 <Dio_SetPinDirection+0x1a0>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <Dio_SetPinDirection+0x19c>
 286:	80 95       	com	r24
 288:	84 23       	and	r24, r20
 28a:	8c 93       	st	X, r24
 28c:	29 c0       	rjmp	.+82     	; 0x2e0 <Dio_SetPinDirection+0x1fe>
			case GroupC: CLR_BIT(DDRC, PinNo); break;
 28e:	a4 e3       	ldi	r26, 0x34	; 52
 290:	b0 e0       	ldi	r27, 0x00	; 0
 292:	e4 e3       	ldi	r30, 0x34	; 52
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	48 2f       	mov	r20, r24
 29a:	8a 81       	ldd	r24, Y+2	; 0x02
 29c:	28 2f       	mov	r18, r24
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 2e       	mov	r0, r18
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <Dio_SetPinDirection+0x1ca>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	0a 94       	dec	r0
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <Dio_SetPinDirection+0x1c6>
 2b0:	80 95       	com	r24
 2b2:	84 23       	and	r24, r20
 2b4:	8c 93       	st	X, r24
 2b6:	14 c0       	rjmp	.+40     	; 0x2e0 <Dio_SetPinDirection+0x1fe>
			case GroupD: CLR_BIT(DDRD, PinNo); break;
 2b8:	a1 e3       	ldi	r26, 0x31	; 49
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	e1 e3       	ldi	r30, 0x31	; 49
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	48 2f       	mov	r20, r24
 2c4:	8a 81       	ldd	r24, Y+2	; 0x02
 2c6:	28 2f       	mov	r18, r24
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 2e       	mov	r0, r18
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <Dio_SetPinDirection+0x1f4>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <Dio_SetPinDirection+0x1f0>
 2da:	80 95       	com	r24
 2dc:	84 23       	and	r24, r20
 2de:	8c 93       	st	X, r24
		else
		{
			//wrong Direction do noting
		}
	}
}
 2e0:	27 96       	adiw	r28, 0x07	; 7
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
 2ec:	cf 91       	pop	r28
 2ee:	df 91       	pop	r29
 2f0:	08 95       	ret

000002f2 <Dio_SetPinValue>:
void Dio_SetPinValue(u8 GroupNo, u8 PinNo, u8 Value)
{
 2f2:	df 93       	push	r29
 2f4:	cf 93       	push	r28
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	27 97       	sbiw	r28, 0x07	; 7
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	de bf       	out	0x3e, r29	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	cd bf       	out	0x3d, r28	; 61
 306:	89 83       	std	Y+1, r24	; 0x01
 308:	6a 83       	std	Y+2, r22	; 0x02
 30a:	4b 83       	std	Y+3, r20	; 0x03
	if((GroupNo<=GroupD) && (PinNo<=PIN7))
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	84 30       	cpi	r24, 0x04	; 4
 310:	08 f0       	brcs	.+2      	; 0x314 <Dio_SetPinValue+0x22>
 312:	ee c0       	rjmp	.+476    	; 0x4f0 <Dio_SetPinValue+0x1fe>
 314:	8a 81       	ldd	r24, Y+2	; 0x02
 316:	88 30       	cpi	r24, 0x08	; 8
 318:	08 f0       	brcs	.+2      	; 0x31c <Dio_SetPinValue+0x2a>
 31a:	ea c0       	rjmp	.+468    	; 0x4f0 <Dio_SetPinValue+0x1fe>
		{
			if(Value==LOW)
 31c:	8b 81       	ldd	r24, Y+3	; 0x03
 31e:	88 23       	and	r24, r24
 320:	09 f0       	breq	.+2      	; 0x324 <Dio_SetPinValue+0x32>
 322:	74 c0       	rjmp	.+232    	; 0x40c <Dio_SetPinValue+0x11a>
			{
				switch(GroupNo)
 324:	89 81       	ldd	r24, Y+1	; 0x01
 326:	28 2f       	mov	r18, r24
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	3f 83       	std	Y+7, r19	; 0x07
 32c:	2e 83       	std	Y+6, r18	; 0x06
 32e:	8e 81       	ldd	r24, Y+6	; 0x06
 330:	9f 81       	ldd	r25, Y+7	; 0x07
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	91 05       	cpc	r25, r1
 336:	59 f1       	breq	.+86     	; 0x38e <Dio_SetPinValue+0x9c>
 338:	2e 81       	ldd	r18, Y+6	; 0x06
 33a:	3f 81       	ldd	r19, Y+7	; 0x07
 33c:	22 30       	cpi	r18, 0x02	; 2
 33e:	31 05       	cpc	r19, r1
 340:	2c f4       	brge	.+10     	; 0x34c <Dio_SetPinValue+0x5a>
 342:	8e 81       	ldd	r24, Y+6	; 0x06
 344:	9f 81       	ldd	r25, Y+7	; 0x07
 346:	00 97       	sbiw	r24, 0x00	; 0
 348:	69 f0       	breq	.+26     	; 0x364 <Dio_SetPinValue+0x72>
 34a:	d2 c0       	rjmp	.+420    	; 0x4f0 <Dio_SetPinValue+0x1fe>
 34c:	2e 81       	ldd	r18, Y+6	; 0x06
 34e:	3f 81       	ldd	r19, Y+7	; 0x07
 350:	22 30       	cpi	r18, 0x02	; 2
 352:	31 05       	cpc	r19, r1
 354:	89 f1       	breq	.+98     	; 0x3b8 <Dio_SetPinValue+0xc6>
 356:	8e 81       	ldd	r24, Y+6	; 0x06
 358:	9f 81       	ldd	r25, Y+7	; 0x07
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	91 05       	cpc	r25, r1
 35e:	09 f4       	brne	.+2      	; 0x362 <Dio_SetPinValue+0x70>
 360:	40 c0       	rjmp	.+128    	; 0x3e2 <Dio_SetPinValue+0xf0>
 362:	c6 c0       	rjmp	.+396    	; 0x4f0 <Dio_SetPinValue+0x1fe>
				{
				case GroupA: CLR_BIT(PORTA, PinNo); break;
 364:	ab e3       	ldi	r26, 0x3B	; 59
 366:	b0 e0       	ldi	r27, 0x00	; 0
 368:	eb e3       	ldi	r30, 0x3B	; 59
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	48 2f       	mov	r20, r24
 370:	8a 81       	ldd	r24, Y+2	; 0x02
 372:	28 2f       	mov	r18, r24
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 2e       	mov	r0, r18
 37c:	02 c0       	rjmp	.+4      	; 0x382 <Dio_SetPinValue+0x90>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	0a 94       	dec	r0
 384:	e2 f7       	brpl	.-8      	; 0x37e <Dio_SetPinValue+0x8c>
 386:	80 95       	com	r24
 388:	84 23       	and	r24, r20
 38a:	8c 93       	st	X, r24
 38c:	b1 c0       	rjmp	.+354    	; 0x4f0 <Dio_SetPinValue+0x1fe>
				case GroupB: CLR_BIT(PORTB, PinNo); break;
 38e:	a8 e3       	ldi	r26, 0x38	; 56
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	e8 e3       	ldi	r30, 0x38	; 56
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	48 2f       	mov	r20, r24
 39a:	8a 81       	ldd	r24, Y+2	; 0x02
 39c:	28 2f       	mov	r18, r24
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 2e       	mov	r0, r18
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <Dio_SetPinValue+0xba>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	0a 94       	dec	r0
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <Dio_SetPinValue+0xb6>
 3b0:	80 95       	com	r24
 3b2:	84 23       	and	r24, r20
 3b4:	8c 93       	st	X, r24
 3b6:	9c c0       	rjmp	.+312    	; 0x4f0 <Dio_SetPinValue+0x1fe>
				case GroupC: CLR_BIT(PORTC, PinNo); break;
 3b8:	a5 e3       	ldi	r26, 0x35	; 53
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e5 e3       	ldi	r30, 0x35	; 53
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	48 2f       	mov	r20, r24
 3c4:	8a 81       	ldd	r24, Y+2	; 0x02
 3c6:	28 2f       	mov	r18, r24
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 2e       	mov	r0, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <Dio_SetPinValue+0xe4>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	0a 94       	dec	r0
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <Dio_SetPinValue+0xe0>
 3da:	80 95       	com	r24
 3dc:	84 23       	and	r24, r20
 3de:	8c 93       	st	X, r24
 3e0:	87 c0       	rjmp	.+270    	; 0x4f0 <Dio_SetPinValue+0x1fe>
				case GroupD: CLR_BIT(PORTD, PinNo); break;
 3e2:	a2 e3       	ldi	r26, 0x32	; 50
 3e4:	b0 e0       	ldi	r27, 0x00	; 0
 3e6:	e2 e3       	ldi	r30, 0x32	; 50
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	48 2f       	mov	r20, r24
 3ee:	8a 81       	ldd	r24, Y+2	; 0x02
 3f0:	28 2f       	mov	r18, r24
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 2e       	mov	r0, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <Dio_SetPinValue+0x10e>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	0a 94       	dec	r0
 402:	e2 f7       	brpl	.-8      	; 0x3fc <Dio_SetPinValue+0x10a>
 404:	80 95       	com	r24
 406:	84 23       	and	r24, r20
 408:	8c 93       	st	X, r24
 40a:	72 c0       	rjmp	.+228    	; 0x4f0 <Dio_SetPinValue+0x1fe>
				}
			}
			else if(Value==HIGH)
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	09 f0       	breq	.+2      	; 0x414 <Dio_SetPinValue+0x122>
 412:	6e c0       	rjmp	.+220    	; 0x4f0 <Dio_SetPinValue+0x1fe>
			{
				switch(GroupNo)
 414:	89 81       	ldd	r24, Y+1	; 0x01
 416:	28 2f       	mov	r18, r24
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	3d 83       	std	Y+5, r19	; 0x05
 41c:	2c 83       	std	Y+4, r18	; 0x04
 41e:	8c 81       	ldd	r24, Y+4	; 0x04
 420:	9d 81       	ldd	r25, Y+5	; 0x05
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	91 05       	cpc	r25, r1
 426:	49 f1       	breq	.+82     	; 0x47a <Dio_SetPinValue+0x188>
 428:	2c 81       	ldd	r18, Y+4	; 0x04
 42a:	3d 81       	ldd	r19, Y+5	; 0x05
 42c:	22 30       	cpi	r18, 0x02	; 2
 42e:	31 05       	cpc	r19, r1
 430:	2c f4       	brge	.+10     	; 0x43c <Dio_SetPinValue+0x14a>
 432:	8c 81       	ldd	r24, Y+4	; 0x04
 434:	9d 81       	ldd	r25, Y+5	; 0x05
 436:	00 97       	sbiw	r24, 0x00	; 0
 438:	61 f0       	breq	.+24     	; 0x452 <Dio_SetPinValue+0x160>
 43a:	5a c0       	rjmp	.+180    	; 0x4f0 <Dio_SetPinValue+0x1fe>
 43c:	2c 81       	ldd	r18, Y+4	; 0x04
 43e:	3d 81       	ldd	r19, Y+5	; 0x05
 440:	22 30       	cpi	r18, 0x02	; 2
 442:	31 05       	cpc	r19, r1
 444:	71 f1       	breq	.+92     	; 0x4a2 <Dio_SetPinValue+0x1b0>
 446:	8c 81       	ldd	r24, Y+4	; 0x04
 448:	9d 81       	ldd	r25, Y+5	; 0x05
 44a:	83 30       	cpi	r24, 0x03	; 3
 44c:	91 05       	cpc	r25, r1
 44e:	e9 f1       	breq	.+122    	; 0x4ca <Dio_SetPinValue+0x1d8>
 450:	4f c0       	rjmp	.+158    	; 0x4f0 <Dio_SetPinValue+0x1fe>
				{
				case GroupA: SET_BIT(PORTA, PinNo); break;
 452:	ab e3       	ldi	r26, 0x3B	; 59
 454:	b0 e0       	ldi	r27, 0x00	; 0
 456:	eb e3       	ldi	r30, 0x3B	; 59
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	48 2f       	mov	r20, r24
 45e:	8a 81       	ldd	r24, Y+2	; 0x02
 460:	28 2f       	mov	r18, r24
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 2e       	mov	r0, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <Dio_SetPinValue+0x17e>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	0a 94       	dec	r0
 472:	e2 f7       	brpl	.-8      	; 0x46c <Dio_SetPinValue+0x17a>
 474:	84 2b       	or	r24, r20
 476:	8c 93       	st	X, r24
 478:	3b c0       	rjmp	.+118    	; 0x4f0 <Dio_SetPinValue+0x1fe>
				case GroupB: SET_BIT(PORTB, PinNo); break;
 47a:	a8 e3       	ldi	r26, 0x38	; 56
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	e8 e3       	ldi	r30, 0x38	; 56
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	48 2f       	mov	r20, r24
 486:	8a 81       	ldd	r24, Y+2	; 0x02
 488:	28 2f       	mov	r18, r24
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 2e       	mov	r0, r18
 492:	02 c0       	rjmp	.+4      	; 0x498 <Dio_SetPinValue+0x1a6>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	0a 94       	dec	r0
 49a:	e2 f7       	brpl	.-8      	; 0x494 <Dio_SetPinValue+0x1a2>
 49c:	84 2b       	or	r24, r20
 49e:	8c 93       	st	X, r24
 4a0:	27 c0       	rjmp	.+78     	; 0x4f0 <Dio_SetPinValue+0x1fe>
				case GroupC: SET_BIT(PORTC, PinNo); break;
 4a2:	a5 e3       	ldi	r26, 0x35	; 53
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	e5 e3       	ldi	r30, 0x35	; 53
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	48 2f       	mov	r20, r24
 4ae:	8a 81       	ldd	r24, Y+2	; 0x02
 4b0:	28 2f       	mov	r18, r24
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 2e       	mov	r0, r18
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <Dio_SetPinValue+0x1ce>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <Dio_SetPinValue+0x1ca>
 4c4:	84 2b       	or	r24, r20
 4c6:	8c 93       	st	X, r24
 4c8:	13 c0       	rjmp	.+38     	; 0x4f0 <Dio_SetPinValue+0x1fe>
				case GroupD: SET_BIT(PORTD, PinNo); break;
 4ca:	a2 e3       	ldi	r26, 0x32	; 50
 4cc:	b0 e0       	ldi	r27, 0x00	; 0
 4ce:	e2 e3       	ldi	r30, 0x32	; 50
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	48 2f       	mov	r20, r24
 4d6:	8a 81       	ldd	r24, Y+2	; 0x02
 4d8:	28 2f       	mov	r18, r24
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 2e       	mov	r0, r18
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <Dio_SetPinValue+0x1f6>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	0a 94       	dec	r0
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <Dio_SetPinValue+0x1f2>
 4ec:	84 2b       	or	r24, r20
 4ee:	8c 93       	st	X, r24
			else
			{
				//wrong Direction do noting
			}
		}
}
 4f0:	27 96       	adiw	r28, 0x07	; 7
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	cd bf       	out	0x3d, r28	; 61
 4fc:	cf 91       	pop	r28
 4fe:	df 91       	pop	r29
 500:	08 95       	ret

00000502 <Dio_GetPinValue>:
u8 Dio_GetPinValue(u8 GroupNo, u8 PinNo)
{
 502:	df 93       	push	r29
 504:	cf 93       	push	r28
 506:	00 d0       	rcall	.+0      	; 0x508 <Dio_GetPinValue+0x6>
 508:	00 d0       	rcall	.+0      	; 0x50a <Dio_GetPinValue+0x8>
 50a:	0f 92       	push	r0
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	8a 83       	std	Y+2, r24	; 0x02
 512:	6b 83       	std	Y+3, r22	; 0x03
	u8 Ret_PinValue=0;
 514:	19 82       	std	Y+1, r1	; 0x01

	if((GroupNo<=GroupD) && (PinNo<=PIN7))
 516:	8a 81       	ldd	r24, Y+2	; 0x02
 518:	84 30       	cpi	r24, 0x04	; 4
 51a:	08 f0       	brcs	.+2      	; 0x51e <Dio_GetPinValue+0x1c>
 51c:	6c c0       	rjmp	.+216    	; 0x5f6 <Dio_GetPinValue+0xf4>
 51e:	8b 81       	ldd	r24, Y+3	; 0x03
 520:	88 30       	cpi	r24, 0x08	; 8
 522:	08 f0       	brcs	.+2      	; 0x526 <Dio_GetPinValue+0x24>
 524:	68 c0       	rjmp	.+208    	; 0x5f6 <Dio_GetPinValue+0xf4>
	{
		switch(GroupNo)
 526:	8a 81       	ldd	r24, Y+2	; 0x02
 528:	28 2f       	mov	r18, r24
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	3d 83       	std	Y+5, r19	; 0x05
 52e:	2c 83       	std	Y+4, r18	; 0x04
 530:	4c 81       	ldd	r20, Y+4	; 0x04
 532:	5d 81       	ldd	r21, Y+5	; 0x05
 534:	41 30       	cpi	r20, 0x01	; 1
 536:	51 05       	cpc	r21, r1
 538:	41 f1       	breq	.+80     	; 0x58a <Dio_GetPinValue+0x88>
 53a:	8c 81       	ldd	r24, Y+4	; 0x04
 53c:	9d 81       	ldd	r25, Y+5	; 0x05
 53e:	82 30       	cpi	r24, 0x02	; 2
 540:	91 05       	cpc	r25, r1
 542:	34 f4       	brge	.+12     	; 0x550 <Dio_GetPinValue+0x4e>
 544:	2c 81       	ldd	r18, Y+4	; 0x04
 546:	3d 81       	ldd	r19, Y+5	; 0x05
 548:	21 15       	cp	r18, r1
 54a:	31 05       	cpc	r19, r1
 54c:	61 f0       	breq	.+24     	; 0x566 <Dio_GetPinValue+0x64>
 54e:	55 c0       	rjmp	.+170    	; 0x5fa <Dio_GetPinValue+0xf8>
 550:	4c 81       	ldd	r20, Y+4	; 0x04
 552:	5d 81       	ldd	r21, Y+5	; 0x05
 554:	42 30       	cpi	r20, 0x02	; 2
 556:	51 05       	cpc	r21, r1
 558:	51 f1       	breq	.+84     	; 0x5ae <Dio_GetPinValue+0xac>
 55a:	8c 81       	ldd	r24, Y+4	; 0x04
 55c:	9d 81       	ldd	r25, Y+5	; 0x05
 55e:	83 30       	cpi	r24, 0x03	; 3
 560:	91 05       	cpc	r25, r1
 562:	b9 f1       	breq	.+110    	; 0x5d2 <Dio_GetPinValue+0xd0>
 564:	4a c0       	rjmp	.+148    	; 0x5fa <Dio_GetPinValue+0xf8>
		{
		case GroupA: Ret_PinValue=GET_BIT(PINA, PinNo); break;
 566:	e9 e3       	ldi	r30, 0x39	; 57
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z
 56c:	28 2f       	mov	r18, r24
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	8b 81       	ldd	r24, Y+3	; 0x03
 572:	88 2f       	mov	r24, r24
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	a9 01       	movw	r20, r18
 578:	02 c0       	rjmp	.+4      	; 0x57e <Dio_GetPinValue+0x7c>
 57a:	55 95       	asr	r21
 57c:	47 95       	ror	r20
 57e:	8a 95       	dec	r24
 580:	e2 f7       	brpl	.-8      	; 0x57a <Dio_GetPinValue+0x78>
 582:	ca 01       	movw	r24, r20
 584:	81 70       	andi	r24, 0x01	; 1
 586:	89 83       	std	Y+1, r24	; 0x01
 588:	38 c0       	rjmp	.+112    	; 0x5fa <Dio_GetPinValue+0xf8>
		case GroupB: Ret_PinValue=GET_BIT(PINB, PinNo); break;
 58a:	e6 e3       	ldi	r30, 0x36	; 54
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	a9 01       	movw	r20, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <Dio_GetPinValue+0xa0>
 59e:	55 95       	asr	r21
 5a0:	47 95       	ror	r20
 5a2:	8a 95       	dec	r24
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <Dio_GetPinValue+0x9c>
 5a6:	ca 01       	movw	r24, r20
 5a8:	81 70       	andi	r24, 0x01	; 1
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	26 c0       	rjmp	.+76     	; 0x5fa <Dio_GetPinValue+0xf8>
		case GroupC: Ret_PinValue=GET_BIT(PINC, PinNo); break;
 5ae:	e3 e3       	ldi	r30, 0x33	; 51
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	28 2f       	mov	r18, r24
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ba:	88 2f       	mov	r24, r24
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	a9 01       	movw	r20, r18
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <Dio_GetPinValue+0xc4>
 5c2:	55 95       	asr	r21
 5c4:	47 95       	ror	r20
 5c6:	8a 95       	dec	r24
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <Dio_GetPinValue+0xc0>
 5ca:	ca 01       	movw	r24, r20
 5cc:	81 70       	andi	r24, 0x01	; 1
 5ce:	89 83       	std	Y+1, r24	; 0x01
 5d0:	14 c0       	rjmp	.+40     	; 0x5fa <Dio_GetPinValue+0xf8>
		case GroupD: Ret_PinValue=GET_BIT(PIND, PinNo); break;
 5d2:	e0 e3       	ldi	r30, 0x30	; 48
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 81       	ld	r24, Z
 5d8:	28 2f       	mov	r18, r24
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	8b 81       	ldd	r24, Y+3	; 0x03
 5de:	88 2f       	mov	r24, r24
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	a9 01       	movw	r20, r18
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <Dio_GetPinValue+0xe8>
 5e6:	55 95       	asr	r21
 5e8:	47 95       	ror	r20
 5ea:	8a 95       	dec	r24
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <Dio_GetPinValue+0xe4>
 5ee:	ca 01       	movw	r24, r20
 5f0:	81 70       	andi	r24, 0x01	; 1
 5f2:	89 83       	std	Y+1, r24	; 0x01
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <Dio_GetPinValue+0xf8>
		}
	}
	else
		Ret_PinValue=0xFF;
 5f6:	8f ef       	ldi	r24, 0xFF	; 255
 5f8:	89 83       	std	Y+1, r24	; 0x01

return Ret_PinValue;
 5fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 5fc:	0f 90       	pop	r0
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
 602:	0f 90       	pop	r0
 604:	0f 90       	pop	r0
 606:	cf 91       	pop	r28
 608:	df 91       	pop	r29
 60a:	08 95       	ret

0000060c <SPI_InitMaster>:
 */
#include "DIO_Int.h"
#include "DIO_Reg.h"
#include "SPI_Int.h"
void SPI_InitMaster(void)
{
 60c:	df 93       	push	r29
 60e:	cf 93       	push	r28
 610:	cd b7       	in	r28, 0x3d	; 61
 612:	de b7       	in	r29, 0x3e	; 62
	//SS PIN
	Dio_SetPinDirection(GroupB, 4, OUTPUT);
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	64 e0       	ldi	r22, 0x04	; 4
 618:	41 e0       	ldi	r20, 0x01	; 1
 61a:	0e 94 71 00 	call	0xe2	; 0xe2 <Dio_SetPinDirection>
	//MOSI PIN
	Dio_SetPinDirection(GroupB, 5, OUTPUT);
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	65 e0       	ldi	r22, 0x05	; 5
 622:	41 e0       	ldi	r20, 0x01	; 1
 624:	0e 94 71 00 	call	0xe2	; 0xe2 <Dio_SetPinDirection>
	//MISO PIN
	Dio_SetPinDirection(GroupB, 6, INPUT);
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	66 e0       	ldi	r22, 0x06	; 6
 62c:	40 e0       	ldi	r20, 0x00	; 0
 62e:	0e 94 71 00 	call	0xe2	; 0xe2 <Dio_SetPinDirection>
	//SCK PIN
	Dio_SetPinDirection(GroupB, 7, OUTPUT);
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	67 e0       	ldi	r22, 0x07	; 7
 636:	41 e0       	ldi	r20, 0x01	; 1
 638:	0e 94 71 00 	call	0xe2	; 0xe2 <Dio_SetPinDirection>

	//Master mode
	SET_BIT(SPCR, 4);
 63c:	ad e2       	ldi	r26, 0x2D	; 45
 63e:	b0 e0       	ldi	r27, 0x00	; 0
 640:	ed e2       	ldi	r30, 0x2D	; 45
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	80 81       	ld	r24, Z
 646:	80 61       	ori	r24, 0x10	; 16
 648:	8c 93       	st	X, r24
	//Enable SPI
	SET_BIT(SPCR, 6);
 64a:	ad e2       	ldi	r26, 0x2D	; 45
 64c:	b0 e0       	ldi	r27, 0x00	; 0
 64e:	ed e2       	ldi	r30, 0x2D	; 45
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	80 81       	ld	r24, Z
 654:	80 64       	ori	r24, 0x40	; 64
 656:	8c 93       	st	X, r24
	//Set clock rate to fso/4
	CLR_BIT(SPCR, 0);
 658:	ad e2       	ldi	r26, 0x2D	; 45
 65a:	b0 e0       	ldi	r27, 0x00	; 0
 65c:	ed e2       	ldi	r30, 0x2D	; 45
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	8e 7f       	andi	r24, 0xFE	; 254
 664:	8c 93       	st	X, r24
	CLR_BIT(SPCR, 1);
 666:	ad e2       	ldi	r26, 0x2D	; 45
 668:	b0 e0       	ldi	r27, 0x00	; 0
 66a:	ed e2       	ldi	r30, 0x2D	; 45
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	80 81       	ld	r24, Z
 670:	8d 7f       	andi	r24, 0xFD	; 253
 672:	8c 93       	st	X, r24
	CLR_BIT(SPSR, 0);
 674:	ae e2       	ldi	r26, 0x2E	; 46
 676:	b0 e0       	ldi	r27, 0x00	; 0
 678:	ee e2       	ldi	r30, 0x2E	; 46
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	8e 7f       	andi	r24, 0xFE	; 254
 680:	8c 93       	st	X, r24

}
 682:	cf 91       	pop	r28
 684:	df 91       	pop	r29
 686:	08 95       	ret

00000688 <SPI_InitSlave>:
void SPI_InitSlave(void)
{
 688:	df 93       	push	r29
 68a:	cf 93       	push	r28
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
	//SS PIN
	Dio_SetPinDirection(GroupB, 4, INPUT);
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	64 e0       	ldi	r22, 0x04	; 4
 694:	40 e0       	ldi	r20, 0x00	; 0
 696:	0e 94 71 00 	call	0xe2	; 0xe2 <Dio_SetPinDirection>
	//MOSI PIN
	Dio_SetPinDirection(GroupB, 5, INPUT);
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	65 e0       	ldi	r22, 0x05	; 5
 69e:	40 e0       	ldi	r20, 0x00	; 0
 6a0:	0e 94 71 00 	call	0xe2	; 0xe2 <Dio_SetPinDirection>
	//MISO PIN
	Dio_SetPinDirection(GroupB, 6, OUTPUT);
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	66 e0       	ldi	r22, 0x06	; 6
 6a8:	41 e0       	ldi	r20, 0x01	; 1
 6aa:	0e 94 71 00 	call	0xe2	; 0xe2 <Dio_SetPinDirection>
	//SCK PIN
	Dio_SetPinDirection(GroupB, 7, INPUT);
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	67 e0       	ldi	r22, 0x07	; 7
 6b2:	40 e0       	ldi	r20, 0x00	; 0
 6b4:	0e 94 71 00 	call	0xe2	; 0xe2 <Dio_SetPinDirection>

	//Enable SPI
	SET_BIT(SPCR, 6);
 6b8:	ad e2       	ldi	r26, 0x2D	; 45
 6ba:	b0 e0       	ldi	r27, 0x00	; 0
 6bc:	ed e2       	ldi	r30, 0x2D	; 45
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	80 64       	ori	r24, 0x40	; 64
 6c4:	8c 93       	st	X, r24
	//Slave mode
	CLR_BIT(SPCR, 4);
 6c6:	ad e2       	ldi	r26, 0x2D	; 45
 6c8:	b0 e0       	ldi	r27, 0x00	; 0
 6ca:	ed e2       	ldi	r30, 0x2D	; 45
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	80 81       	ld	r24, Z
 6d0:	8f 7e       	andi	r24, 0xEF	; 239
 6d2:	8c 93       	st	X, r24
}
 6d4:	cf 91       	pop	r28
 6d6:	df 91       	pop	r29
 6d8:	08 95       	ret

000006da <SPI_SendByte>:
void SPI_SendByte(u8 data)
{
 6da:	df 93       	push	r29
 6dc:	cf 93       	push	r28
 6de:	0f 92       	push	r0
 6e0:	cd b7       	in	r28, 0x3d	; 61
 6e2:	de b7       	in	r29, 0x3e	; 62
 6e4:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
 6e6:	ef e2       	ldi	r30, 0x2F	; 47
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	89 81       	ldd	r24, Y+1	; 0x01
 6ec:	80 83       	st	Z, r24
	while (GET_BIT(SPSR, 7) == 0);
 6ee:	ee e2       	ldi	r30, 0x2E	; 46
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	88 23       	and	r24, r24
 6f6:	dc f7       	brge	.-10     	; 0x6ee <SPI_SendByte+0x14>
}
 6f8:	0f 90       	pop	r0
 6fa:	cf 91       	pop	r28
 6fc:	df 91       	pop	r29
 6fe:	08 95       	ret

00000700 <SPI_ReceiveByte>:
u8 SPI_ReceiveByte(void)
{
 700:	df 93       	push	r29
 702:	cf 93       	push	r28
 704:	0f 92       	push	r0
 706:	cd b7       	in	r28, 0x3d	; 61
 708:	de b7       	in	r29, 0x3e	; 62
	u8 data;
	while (GET_BIT(SPSR, 7) == 0);
 70a:	ee e2       	ldi	r30, 0x2E	; 46
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	88 23       	and	r24, r24
 712:	dc f7       	brge	.-10     	; 0x70a <SPI_ReceiveByte+0xa>
	data = SPDR;
 714:	ef e2       	ldi	r30, 0x2F	; 47
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	80 81       	ld	r24, Z
 71a:	89 83       	std	Y+1, r24	; 0x01
	return (data);
 71c:	89 81       	ldd	r24, Y+1	; 0x01

}
 71e:	0f 90       	pop	r0
 720:	cf 91       	pop	r28
 722:	df 91       	pop	r29
 724:	08 95       	ret

00000726 <UART_Init>:

#include "Utilities.h"
#include "UART_Int.h"

void UART_Init(void)
{
 726:	df 93       	push	r29
 728:	cf 93       	push	r28
 72a:	cd b7       	in	r28, 0x3d	; 61
 72c:	de b7       	in	r29, 0x3e	; 62
	//write on UCSRC
	SET_BIT(UCSRC, 7);
 72e:	a0 e4       	ldi	r26, 0x40	; 64
 730:	b0 e0       	ldi	r27, 0x00	; 0
 732:	e0 e4       	ldi	r30, 0x40	; 64
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 81       	ld	r24, Z
 738:	80 68       	ori	r24, 0x80	; 128
 73a:	8c 93       	st	X, r24
	//enable Tx,Rx
	SET_BIT(UCSRB, 3);
 73c:	aa e2       	ldi	r26, 0x2A	; 42
 73e:	b0 e0       	ldi	r27, 0x00	; 0
 740:	ea e2       	ldi	r30, 0x2A	; 42
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	88 60       	ori	r24, 0x08	; 8
 748:	8c 93       	st	X, r24
	SET_BIT(UCSRB, 4);
 74a:	aa e2       	ldi	r26, 0x2A	; 42
 74c:	b0 e0       	ldi	r27, 0x00	; 0
 74e:	ea e2       	ldi	r30, 0x2A	; 42
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	80 61       	ori	r24, 0x10	; 16
 756:	8c 93       	st	X, r24
	//set to asynchronous
	CLR_BIT(UCSRC, 6);
 758:	a0 e4       	ldi	r26, 0x40	; 64
 75a:	b0 e0       	ldi	r27, 0x00	; 0
 75c:	e0 e4       	ldi	r30, 0x40	; 64
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	8f 7b       	andi	r24, 0xBF	; 191
 764:	8c 93       	st	X, r24
	//no parity
	CLR_BIT(UCSRC, 4);
 766:	a0 e4       	ldi	r26, 0x40	; 64
 768:	b0 e0       	ldi	r27, 0x00	; 0
 76a:	e0 e4       	ldi	r30, 0x40	; 64
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	80 81       	ld	r24, Z
 770:	8f 7e       	andi	r24, 0xEF	; 239
 772:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, 5);
 774:	a0 e4       	ldi	r26, 0x40	; 64
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	e0 e4       	ldi	r30, 0x40	; 64
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	8f 7d       	andi	r24, 0xDF	; 223
 780:	8c 93       	st	X, r24
	//1 stop bit
	CLR_BIT(UCSRC, 3);
 782:	a0 e4       	ldi	r26, 0x40	; 64
 784:	b0 e0       	ldi	r27, 0x00	; 0
 786:	e0 e4       	ldi	r30, 0x40	; 64
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	80 81       	ld	r24, Z
 78c:	87 7f       	andi	r24, 0xF7	; 247
 78e:	8c 93       	st	X, r24
	//data set to 8 bits
	SET_BIT(UCSRC, 1);
 790:	a0 e4       	ldi	r26, 0x40	; 64
 792:	b0 e0       	ldi	r27, 0x00	; 0
 794:	e0 e4       	ldi	r30, 0x40	; 64
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	80 81       	ld	r24, Z
 79a:	82 60       	ori	r24, 0x02	; 2
 79c:	8c 93       	st	X, r24
	SET_BIT(UCSRC, 2);
 79e:	a0 e4       	ldi	r26, 0x40	; 64
 7a0:	b0 e0       	ldi	r27, 0x00	; 0
 7a2:	e0 e4       	ldi	r30, 0x40	; 64
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	84 60       	ori	r24, 0x04	; 4
 7aa:	8c 93       	st	X, r24
	CLR_BIT(UCSRB, 2);
 7ac:	aa e2       	ldi	r26, 0x2A	; 42
 7ae:	b0 e0       	ldi	r27, 0x00	; 0
 7b0:	ea e2       	ldi	r30, 0x2A	; 42
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	80 81       	ld	r24, Z
 7b6:	8b 7f       	andi	r24, 0xFB	; 251
 7b8:	8c 93       	st	X, r24
	//set baud rate
	UBRRL = 103;
 7ba:	e9 e2       	ldi	r30, 0x29	; 41
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	87 e6       	ldi	r24, 0x67	; 103
 7c0:	80 83       	st	Z, r24
}
 7c2:	cf 91       	pop	r28
 7c4:	df 91       	pop	r29
 7c6:	08 95       	ret

000007c8 <UART_Send>:
void UART_Send(u8 data)
{
 7c8:	df 93       	push	r29
 7ca:	cf 93       	push	r28
 7cc:	0f 92       	push	r0
 7ce:	cd b7       	in	r28, 0x3d	; 61
 7d0:	de b7       	in	r29, 0x3e	; 62
 7d2:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA, 5) == 0);
 7d4:	eb e2       	ldi	r30, 0x2B	; 43
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	80 81       	ld	r24, Z
 7da:	82 95       	swap	r24
 7dc:	86 95       	lsr	r24
 7de:	87 70       	andi	r24, 0x07	; 7
 7e0:	88 2f       	mov	r24, r24
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	81 70       	andi	r24, 0x01	; 1
 7e6:	90 70       	andi	r25, 0x00	; 0
 7e8:	00 97       	sbiw	r24, 0x00	; 0
 7ea:	a1 f3       	breq	.-24     	; 0x7d4 <UART_Send+0xc>
		UDR = data;
 7ec:	ec e2       	ldi	r30, 0x2C	; 44
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	89 81       	ldd	r24, Y+1	; 0x01
 7f2:	80 83       	st	Z, r24
}
 7f4:	0f 90       	pop	r0
 7f6:	cf 91       	pop	r28
 7f8:	df 91       	pop	r29
 7fa:	08 95       	ret

000007fc <UART_Receive>:
u8 UART_Receive (void)
{
 7fc:	df 93       	push	r29
 7fe:	cf 93       	push	r28
 800:	0f 92       	push	r0
 802:	cd b7       	in	r28, 0x3d	; 61
 804:	de b7       	in	r29, 0x3e	; 62
	u8 data;

	while (GET_BIT(UCSRA, 7) == 0);
 806:	eb e2       	ldi	r30, 0x2B	; 43
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	88 23       	and	r24, r24
 80e:	dc f7       	brge	.-10     	; 0x806 <UART_Receive+0xa>
		data = UDR;
 810:	ec e2       	ldi	r30, 0x2C	; 44
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	89 83       	std	Y+1, r24	; 0x01
	return (data);
 818:	89 81       	ldd	r24, Y+1	; 0x01
}
 81a:	0f 90       	pop	r0
 81c:	cf 91       	pop	r28
 81e:	df 91       	pop	r29
 820:	08 95       	ret

00000822 <main>:
 */

#include "Actuator_Int.h"

void main(void)
{
 822:	df 93       	push	r29
 824:	cf 93       	push	r28
 826:	cd b7       	in	r28, 0x3d	; 61
 828:	de b7       	in	r29, 0x3e	; 62
	Actuator_Init(); //Initialize Actuator (LED)
 82a:	0e 94 36 00 	call	0x6c	; 0x6c <Actuator_Init>
	while(1)
	{
		Actuator_Control(); //Control (LED) from BT value
 82e:	0e 94 44 00 	call	0x88	; 0x88 <Actuator_Control>
 832:	fd cf       	rjmp	.-6      	; 0x82e <main+0xc>

00000834 <_exit>:
 834:	f8 94       	cli

00000836 <__stop_program>:
 836:	ff cf       	rjmp	.-2      	; 0x836 <__stop_program>
